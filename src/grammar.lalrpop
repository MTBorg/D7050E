use std::str::FromStr;

use crate::parsing::expr_parser::{ Opcode };
use crate::node::Node;
use crate::func::Func;

grammar;

pub Expr: Box<Node> = {
    Expr ExprOp Factor => Box::new(Node::Op(<>)),
    Factor,
};

ExprOp: Opcode = { 
    "+" => Opcode::Add,
    "-" => Opcode::Sub,
};

Factor: Box<Node> = {
    Factor FactorOp Term => Box::new(Node::Op(<>)),
    Term,
};

FactorOp: Opcode = {
    "*" => Opcode::Mul,
    "/" => Opcode::Div,
};

Term: Box<Node> = {
    Num => Box::new(Node::Number(<>)), 
		Var => Box::new(Node::Var(<>)),
    "(" <Expr> ")"
};

Num: i32 = {
    r"[0-9]+" => i32::from_str(<>).unwrap()
};

Var: String = {
	r"_*[a-z]+\w*" => <>.to_string()
}

pub Func: Func = {
	"fn" <func_name: FuncName> "(" ")" => Func{
		name: func_name,
		params: vec!() 
	},
	"fn" <func_name: FuncName> "(" <func_param: FuncParam> ")" => Func{
		name: func_name,
		params: func_param 
	}
};

FuncParam: Vec<String> = {
	<func_param: FuncParam> "," <func_name: FuncName> => {
		// This is ugly but it works
		// TODO: Find a way to do this using lalrpop
		let mut new_vec = func_param.clone();
		new_vec.push(func_name);
		new_vec
	},
	FuncName => vec!(<>),
};
	
FuncName: String = {
	r"_*[a-z]+\w*" => <>.to_string()
};
