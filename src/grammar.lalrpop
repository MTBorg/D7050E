use std::str::FromStr;

use crate::parsing::expr_parser::{ Opcode };
use crate::node::Node;
use crate::func::Func;

grammar;

Identifier: String = {
	r"_*[a-z]+\w*" => <>.to_string()
}

pub Expr: Box<Node> = {
    Expr ExprOp Factor => Box::new(Node::Op(<>)),
    Factor,
};

ExprOp: Opcode = { 
    "+" => Opcode::Add,
    "-" => Opcode::Sub,
};

Factor: Box<Node> = {
    Factor FactorOp Term => Box::new(Node::Op(<>)),
    Term,
};

FactorOp: Opcode = {
    "*" => Opcode::Mul,
    "/" => Opcode::Div,
};

Term: Box<Node> = {
    Num => Box::new(Node::Number(<>)), 
		Var => Box::new(Node::Var(<>)),
    "(" <Expr> ")"
};

Num: i32 = {
    r"[0-9]+" => i32::from_str(<>).unwrap()
};

Var = Identifier;

pub FuncCall: usize = {
	Identifier"(" <args:FuncArgs> ")" ";"? => args.len()
};

FuncArgs: Vec<String> = {
	<args:(<Identifier> ",")*> <arg:FuncArg?> => match arg{
		Some(arg) => {
			let mut args = args;
			args.push(arg);
			args
		},
		None => args
	}
};


FuncArg: String = {
	Identifier,
	Num => <>.to_string()
};
	
FuncName = Identifier;
